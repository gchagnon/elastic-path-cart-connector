/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.amazonaws.example.api;

import com.amazonaws.example.model.CreateCartItemRequest;
import com.amazonaws.example.model.CreateCartRequest;
import com.amazonaws.example.model.GetCartItemResponse;
import com.amazonaws.example.model.GetCartResponse;
import com.amazonaws.example.model.ListCartItemsResponse;
import com.amazonaws.example.model.ListCartsResponse;
import com.amazonaws.example.model.UpdateCartItemRequest;
import com.amazonaws.example.model.UpdateCartRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-14T18:22:55.097480834Z[UTC]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "carts", description = "the carts API")
public interface CartsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /carts : Creates a new cart with an optional list of items.
     *
     * @param createCartRequest  (required)
     * @return The created cart. (status code 201)
     */
    @Operation(
        operationId = "createCart",
        summary = "Creates a new cart with an optional list of items.",
        responses = {
            @ApiResponse(responseCode = "201", description = "The created cart.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/carts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> createCart(
        @Parameter(name = "CreateCartRequest", description = "", required = true) @Valid @RequestBody CreateCartRequest createCartRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /carts/{cartId}/items : Creates a new cart item in the specified cart.
     *
     * @param cartId  (required)
     * @param createCartItemRequest  (required)
     * @return The cart item was created. (status code 201)
     */
    @Operation(
        operationId = "createCartItem",
        summary = "Creates a new cart item in the specified cart.",
        responses = {
            @ApiResponse(responseCode = "201", description = "The cart item was created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/carts/{cartId}/items",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> createCartItem(
        @Pattern(regexp = "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$") @Parameter(name = "cartId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("cartId") String cartId,
        @Parameter(name = "CreateCartItemRequest", description = "", required = true) @Valid @RequestBody CreateCartItemRequest createCartItemRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /carts/{cartId} : Deletes a cart by cartId.
     *
     * @param cartId The ID of the cart. (required)
     * @return The cart was deleted. (status code 204)
     */
    @Operation(
        operationId = "deleteCart",
        summary = "Deletes a cart by cartId.",
        responses = {
            @ApiResponse(responseCode = "204", description = "The cart was deleted.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/carts/{cartId}"
    )
    
    default ResponseEntity<Void> deleteCart(
        @Pattern(regexp = "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$") @Parameter(name = "cartId", description = "The ID of the cart.", required = true, in = ParameterIn.PATH) @PathVariable("cartId") String cartId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /carts/{cartId}/items/{cartItemId} : Deletes a cart item by cartItemId.
     *
     * @param cartId  (required)
     * @param cartItemId  (required)
     * @return The cart item was deleted. (status code 204)
     */
    @Operation(
        operationId = "deleteCartItem",
        summary = "Deletes a cart item by cartItemId.",
        responses = {
            @ApiResponse(responseCode = "204", description = "The cart item was deleted.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/carts/{cartId}/items/{cartItemId}"
    )
    
    default ResponseEntity<Void> deleteCartItem(
        @Pattern(regexp = "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$") @Parameter(name = "cartId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("cartId") String cartId,
        @Pattern(regexp = "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$") @Parameter(name = "cartItemId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("cartItemId") String cartItemId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /carts/{cartId} : Retrieves a cart by cartId.
     *
     * @param cartId The ID of the cart. (required)
     * @return The cart details. (status code 200)
     */
    @Operation(
        operationId = "getCart",
        summary = "Retrieves a cart by cartId.",
        responses = {
            @ApiResponse(responseCode = "200", description = "The cart details.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetCartResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/carts/{cartId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetCartResponse> getCart(
        @Pattern(regexp = "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$") @Parameter(name = "cartId", description = "The ID of the cart.", required = true, in = ParameterIn.PATH) @PathVariable("cartId") String cartId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"couponCodes\" : \"couponCodes\", \"totalItems\" : 0, \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"cartId\" : \"cartId\", \"customerContext\" : { \"customerType\" : \"customerType\", \"attributes\" : [ { \"value\" : \"value\", \"key\" : \"key\" }, { \"value\" : \"value\", \"key\" : \"key\" } ], \"id\" : \"id\" }, \"description\" : \"description\", \"subTotal\" : 2.3021358869347655, \"totalTax\" : 5.637376656633329, \"totalAmount\" : 1.4658129805029452, \"name\" : \"name\", \"modified\" : \"2000-01-23T04:56:07.000+00:00\", \"totalDiscount\" : 5.962133916683182, \"currency\" : \"currency\", \"totalUniqueItems\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /carts/{cartId}/items/{cartItemId} : Retrieves details for a specific cart item.
     *
     * @param cartId  (required)
     * @param cartItemId  (required)
     * @return The cart item details. (status code 200)
     */
    @Operation(
        operationId = "getCartItem",
        summary = "Retrieves details for a specific cart item.",
        responses = {
            @ApiResponse(responseCode = "200", description = "The cart item details.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetCartItemResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/carts/{cartId}/items/{cartItemId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetCartItemResponse> getCartItem(
        @Pattern(regexp = "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$") @Parameter(name = "cartId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("cartId") String cartId,
        @Pattern(regexp = "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$") @Parameter(name = "cartItemId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("cartItemId") String cartItemId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"quantity\" : 0, \"productId\" : \"productId\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"modified\" : \"2000-01-23T04:56:07.000+00:00\", \"attributes\" : [ { \"value\" : \"value\", \"key\" : \"key\" }, { \"value\" : \"value\", \"key\" : \"key\" } ], \"sku\" : \"sku\", \"cartItemId\" : \"cartItemId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /carts/{cartId}/items : Retrieves all items in the specified cart.
     *
     * @param cartId  (required)
     * @return A list of cart items. (status code 200)
     */
    @Operation(
        operationId = "listCartItems",
        summary = "Retrieves all items in the specified cart.",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of cart items.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListCartItemsResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/carts/{cartId}/items",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ListCartItemsResponse> listCartItems(
        @Pattern(regexp = "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$") @Parameter(name = "cartId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("cartId") String cartId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"items\" : [ { \"quantity\" : 0, \"productId\" : \"productId\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"modified\" : \"2000-01-23T04:56:07.000+00:00\", \"attributes\" : [ { \"value\" : \"value\", \"key\" : \"key\" }, { \"value\" : \"value\", \"key\" : \"key\" } ], \"sku\" : \"sku\", \"cartItemId\" : \"cartItemId\" }, { \"quantity\" : 0, \"productId\" : \"productId\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"modified\" : \"2000-01-23T04:56:07.000+00:00\", \"attributes\" : [ { \"value\" : \"value\", \"key\" : \"key\" }, { \"value\" : \"value\", \"key\" : \"key\" } ], \"sku\" : \"sku\", \"cartItemId\" : \"cartItemId\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /carts : Retrieves a paginated list of all carts.
     *
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @return A list of cart summaries. (status code 200)
     */
    @Operation(
        operationId = "listCarts",
        summary = "Retrieves a paginated list of all carts.",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of cart summaries.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListCartsResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/carts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ListCartsResponse> listCarts(
        @Parameter(name = "nextToken", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nextToken", required = false) Integer nextToken,
        @Parameter(name = "pageSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"nextToken\" : 0, \"items\" : [ { \"cartId\" : \"cartId\", \"name\" : \"name\" }, { \"cartId\" : \"cartId\", \"name\" : \"name\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /carts/{cartId} : Updates an existing cart.
     *
     * @param cartId The ID of the cart. (required)
     * @param updateCartRequest  (required)
     * @return The updated cart. (status code 200)
     */
    @Operation(
        operationId = "updateCart",
        summary = "Updates an existing cart.",
        responses = {
            @ApiResponse(responseCode = "200", description = "The updated cart.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/carts/{cartId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateCart(
        @Pattern(regexp = "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$") @Parameter(name = "cartId", description = "The ID of the cart.", required = true, in = ParameterIn.PATH) @PathVariable("cartId") String cartId,
        @Parameter(name = "UpdateCartRequest", description = "", required = true) @Valid @RequestBody UpdateCartRequest updateCartRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /carts/{cartId}/items/{cartItemId} : Updates a specific cart item.
     *
     * @param cartId  (required)
     * @param cartItemId  (required)
     * @param updateCartItemRequest  (required)
     * @return The cart item was updated. (status code 200)
     */
    @Operation(
        operationId = "updateCartItem",
        summary = "Updates a specific cart item.",
        responses = {
            @ApiResponse(responseCode = "200", description = "The cart item was updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/carts/{cartId}/items/{cartItemId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateCartItem(
        @Pattern(regexp = "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$") @Parameter(name = "cartId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("cartId") String cartId,
        @Pattern(regexp = "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$") @Parameter(name = "cartItemId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("cartItemId") String cartItemId,
        @Parameter(name = "UpdateCartItemRequest", description = "", required = true) @Valid @RequestBody UpdateCartItemRequest updateCartItemRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
